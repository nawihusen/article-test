// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	domain "alpha-test/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ArticleRepository is an autogenerated mock type for the ArticleRepository type
type ArticleRepository struct {
	mock.Mock
}

// GetArticles provides a mock function with given fields: ctx, author, title, body
func (_m *ArticleRepository) GetArticles(ctx context.Context, author string, title string, body string) ([]domain.Article, error) {
	ret := _m.Called(ctx, author, title, body)

	var r0 []domain.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ([]domain.Article, error)); ok {
		return rf(ctx, author, title, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []domain.Article); ok {
		r0 = rf(ctx, author, title, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, author, title, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostArticle provides a mock function with given fields: ctx, article
func (_m *ArticleRepository) PostArticle(ctx context.Context, article domain.Article) error {
	ret := _m.Called(ctx, article)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Article) error); ok {
		r0 = rf(ctx, article)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewArticleRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewArticleRepository creates a new instance of ArticleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewArticleRepository(t mockConstructorTestingTNewArticleRepository) *ArticleRepository {
	mock := &ArticleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
